plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
//    id 'com.diffplug.spotless' version '6.1.2'
}

group = 'fh.burgenland'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.h2database:h2:2.0.204'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2'
    testImplementation 'io.cucumber:cucumber-java:7.1.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.1.0'
    testImplementation 'io.cucumber:cucumber-spring:7.1.0'
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

springBoot {
    buildInfo()
}
//
//spotless {
//    // optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'
//
//    format 'misc', {
//        // define the files to apply `misc` to
//        target '*.gradle', '*.md', '.gitignore'
//
//        // define the steps to apply to those files
//        trimTrailingWhitespace()
//        indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
//        endWithNewline()
//    }
//    java {
//        // don't need to set target, it is inferred from java
//
//        // apply a specific flavor of google-java-format
//        googleJavaFormat('1.8').aosp().reflowLongStrings()
//        // make sure every file has the following copyright header.
//        // optionally, Spotless can set copyright years by digging
//        // through git history (see "license" section below)
//        licenseHeader '/* (C)$YEAR */'
//        prettier()
//    }
//}
